version: '3.0'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    command:  bash -c "python manage.py migrate && gunicorn --bind 0.0.0.0:8000 assign.wsgi:application"
    volumes:
      - .:/app
    environment:
      MYSQL_NAME: dj_store
      MYSQL_USER: root
      MYSQL_PASSWORD: Ron@8642
      MYSQL_HOST: db
      MYSQL_PORT: 3306
      DJANGO_PROJECT_NAME: assign
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend_network
      - db_network

  db:
    image: mysql:8.0.40-debian
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: Ron@8642
      MYSQL_DATABASE: dj_store
    ports:
      - "3307:3306"
    volumes:
      - data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - db_network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-pRon@8642" ]
      interval: 10s
      retries: 3
#      start_period: 50s
      timeout: 5s

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_RANDOM_PASSWORD=yes
      - REDIS_PASSWORD=Ron@8642
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 3
      timeout: 5s

  nginx:
    image: nginx:1.27.3
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./staticfiles:/app
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - backend_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.2" ]
      interval: 10s
      retries: 3
#      start_period: 50s
      timeout: 5s

networks:
  db_network:
    driver: bridge
  backend_network:
    driver: bridge

volumes:
  data:
  nginx.conf:
    external: false
